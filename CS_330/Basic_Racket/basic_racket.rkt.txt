;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname basic_racket) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
;sum-coins? : number, number, number, number -> number
;given the count of 4 different types of coins, returns the dollar amount
(define (sum-coins pennies nickels dimes quarters)
  (+ (* pennies .01) (* nickels .05) (* dimes .1) (* quarters .25)))

(check-expect (sum-coins 0 0 0 0) 0.00)
(check-expect (sum-coins 3 0 0 0) 0.03)
(check-expect (sum-coins 0 5 0 0) 0.25)
(check-expect (sum-coins 0 0 8 0) 0.80)
(check-expect (sum-coins 0 0 0 7) 1.75)
(check-expect (sum-coins 3 4 2 6) 1.93)


;area-cylinder? : number, number -> number
;computes surface area of a cylinder given radius and height
(define (area-cylinder base-radius height)
  (+ (* 2 pi base-radius height) (* 2 pi (sqr base-radius))))

(check-within (area-cylinder 2 4) 75.40 .01)
(check-within (area-cylinder 7 4) 483.81 .01)


;tax? : number -> number
;returns the amount of tax owed based on a person's salary
(define (tax gross-pay)
  (cond
    [(<= gross-pay 240) 0.00]
    [(<= gross-pay 480) (* gross-pay .15)]
    [ else (* gross-pay .28)]
    ))

(check-expect (tax 0) 0.00)
(check-expect (tax 100) 0.00)
(check-expect (tax 240) 0.00)
(check-expect (tax 300) 45.00)
(check-expect (tax 480) 72.00)
(check-expect (tax 500) 140.00)


;netpay? : number -> number
;Given the hours a $12/hr employee worked return the pay after taxes
(define (netpay hours-worked)
  (- (* hours-worked 12) (tax(* hours-worked 12))))

;we already know tax works well, so one check here (two for "generalization" :) )
(check-expect (netpay 40) 408)
(check-expect (netpay 10) 120)


;what-kind? : number, number, number -> symbol
;given 3 standard coefficients, determine what sort of a quadratic
        ;equation it represents
(define (what-kind a b c)
  (cond
    [(= a 0) 'degenerate]
    [(= (- (sqr b) (* 4 a c)) 0) 'one]
    [(> (- (sqr b) (* 4 a c)) 0) 'two]
    [else 'none]
    ))

(check-expect (what-kind 0 1 3) 'degenerate)
(check-expect (what-kind 1 2 1) 'one)
(check-expect (what-kind 5 1 10) 'none)
(check-expect (what-kind 2 10 2) 'two)


;struct time: number, number, number
;represents points in time since midnights
(define-struct time [hours minutes seconds])


;time-diff? : time, time -> number
;given two times (structs), return the difference in seconds
(define (time-diff t1 t2)
  (- (+
      (* 3600 (time-hours t2))
      (* 60 (time-minutes t2))
      (time-seconds t2))
     (+
      (* 3600 (time-hours t1))
      (* 60 (time-minutes t1))
      (time-seconds t1))
 ))

(check-expect (time-diff (make-time 0 0 0) (make-time 0 0 0)) 0)
(check-expect (time-diff (make-time 1 0 0) (make-time 2 0 0)) 3600)
(check-expect (time-diff (make-time 0 5 0) (make-time 0 10 0)) 300)
(check-expect (time-diff (make-time 0 0 0) (make-time 0 0 22)) 22)
(check-expect (time-diff (make-time 0 0 5) (make-time 1 10 1)) 4196)


;struct postion: number, number
;a two dimensional point x,y
(define-struct position [x y])


;struct circ: position(struct), number
;a circle defined by a center point and a radius
(define-struct circ [center radius])


;struct square: position(struct), number
;a square defined by a corner and side length
(define-struct square [upper-left length])


;struct rect: position(struct), number, number
;a rectangle defined by a corner, width, and height
(define-struct rect [upper-left width height])


;area? : shape -> number
;will compute the area of a circle, square, or rectangle
(define (area shape)
  (cond
    [(circ? shape) (* pi (sqr (circ-radius shape)))]
    [(square? shape) (sqr (square-length shape))]
    [(rect? shape) (* (rect-width shape) (rect-height shape))]
   ))

(check-within (area (make-circ (make-position 1 1) 5)) 78.54 .01)
(check-expect (area (make-square (make-position 1 1) 5)) 25)
(check-expect (area (make-rect (make-position 1 1) 3 4)) 12)


;translate-shape? : shape, number -> shape
;the input and output shape is the same shape,
;                          but is shifted l/r by some number
(define (translate-shape shape delta)
  (cond
    [(circ? shape)
       (make-circ
         (make-position
            (+ (position-x (circ-center shape)) delta)
            (position-y (circ-center shape))
          )
          (circ-radius shape)
        )
        
     ]
    [(square? shape)
       (make-square
         (make-position
            (+ (position-x (square-upper-left shape)) delta)
            (position-y (square-upper-left shape))
          )
          (square-length shape)
        )
     ]
    [(rect? shape)
       (make-rect
         (make-position
            (+ (position-x (rect-upper-left shape)) delta)
            (position-y (rect-upper-left shape))
          )
          (rect-width shape)
          (rect-height shape)
        )
     ]
   ))


;make some shapes to test the procedures
(define c (make-circ (make-position 1 1) 4))
(define s (make-square (make-position 1 1) 4))
(define r (make-rect (make-position 1 1) 4 11))

(check-expect (translate-shape c 4) (make-circ (make-position 5 1) 4))
(check-expect (translate-shape s -1) (make-square (make-position 0 1) 4))
(check-expect (translate-shape r 11) (make-rect (make-position 12 1) 4 11))


;in-shape? : shape, position -> boolean
;true if the position is within the shape, false otherwise
(define (in-shape shape p)
  (cond
    [(circ? shape) (<= (sqrt (+
                         (sqr (- (position-x p) (position-x (circ-center shape))))
                         (sqr (- (position-y p) (position-y (circ-center shape)))))
                        )
                   (circ-radius shape))]
    [(square? shape) (and (>= (position-x p) (position-x (square-upper-left shape)))
                          (<= (position-x p) (+ (position-x (square-upper-left shape))
                                            (square-length shape)))
                          (<= (position-y p) (position-y (square-upper-left shape)))
                          (>= (position-y p) (- (position-y (square-upper-left shape))
                                                (square-length shape))))] 
    [(rect? shape) ( and (>= (position-x p) (position-x (rect-upper-left shape)))
                         (<= (position-x p) (+ (position-x (rect-upper-left shape))
                                            (rect-width shape)))
                         (<= (position-y p) (position-y (rect-upper-left shape)))
                          (>= (position-y p) (- (position-y (rect-upper-left shape))
                                                (rect-height shape))))] 
   )
)


(check-expect (in-shape c (make-position 1 2)) #t)
(check-expect (in-shape c (make-position 1 8)) #f)
(check-expect (in-shape s (make-position 1 0)) #t)
(check-expect (in-shape s (make-position 5 5)) #f)
(check-expect (in-shape r (make-position 4 -5)) #t)
(check-expect (in-shape r (make-position 6 4)) #f)




  